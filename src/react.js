import path from 'path'
import fs from 'fs'

let config

export default function react() {
  return {
    name: 'svelte-bridge-react',
    configResolved(resolvedConfig) {
      config = resolvedConfig
    },
    async closeBundle() {
      const outDir = path.join(config.build.outDir, 'react')
      const packagePath = path.join(config.root, "package.json")
      const { bridge } = JSON.parse(await fs.promises.readFile(packagePath))

      if (!bridge) {
        throw new Error('missing key `bridge` in package.json')
      }

      await fs.promises.mkdir(outDir, { recursive: true })


      for (const [filePath, distPath] of Object.entries(bridge)) {
        const fullPath = path.join(outDir, distPath) + '.jsx'
        const componentName = distPath
        const source = `
// generated by vite-plugin-svelte-bridge
import { useRef, useEffect, createElement } from 'react'
import { ${componentName} } from '../${config.build.lib.fileName}'

function ReactWrapper(component) {
  return (props) => {
    const ref = useRef()
    const componentRef = useRef()

    useEffect(() => {
      if (!componentRef.current) {
        componentRef.current = new component({ target: ref.current, props })

        const eventPairs = Object.entries(props).filter(([name, _]) => name.match(/^on./))

        eventPairs.forEach(([eventName, handler]) => {
          eventName = eventName.replace(/^on/, '')
          eventName = eventName[0].toLowerCase() + eventName.substring(1)

          componentRef.current.$on(eventName, handler)
        })
      }

      return () => {
        //componentRef.current?.$destroy()
      }
    }, [])

    useEffect(() => {
      if (componentRef.current) {
        componentRef.current.$set(props)
      }
    }, [props])

    return createElement('div', { ref })
  }
}

export default ReactWrapper(${componentName})`

        await fs.promises.writeFile(fullPath, source)

        console.log(fullPath)
      }
    }
  }
}
